/*
this file contains most used keywords across the most used programming languages
 */

import 'package:smart_syntax_widget/enum/language_enum.dart';

/// ReservedWords class it will keep collection of all reserved words including keywords
/// and provides a function to check if input is a reserved word
class ReservedWords {
  /// additional reserved words to be used by user
  /// just add reserved words in top level function once
  /// and use it anywhere in any instance of SmartSyntaxWidget
  /// for example using html elements as reserved words:-
  /// `void main(){
  ///   ReservedWords.userReservedWords['html'] = { 'html', 'div', 'body', 'head'}
  /// }`
  /// Now use it anywhere by using:-
  /// `SmartSyntaxWidget(
  ///   '<html>\n<head>\n</head>\n<body>\n<body>\n</html>',
  ///   reservedWordSets: const ['html'],
  /// )`
  static Map<String, Set<String>> userReservedWords = {};

  /// function to check if input is a reserved word
  static bool isReservedWord(Set<LanguageEnum> keySet, String value) {
    for (LanguageEnum key in keySet) {
      var s1 = _reservedWords[key], s2 = userReservedWords[key];
      if ((s1 != null && s1.contains(value)) || (s2 != null && s2.contains(value))) {
        return true;
      }
    }
    return false;
  }

  /// check if a key exists in reserved words map, return true if exists otherwise false
  /// for ex `ReservedWords.exists('java') will return true`
  static bool exists(String key) => _reservedWords.containsKey(key) || userReservedWords.containsKey(key);

  /// default reserved word sets provided by this package
  static const _reservedWords = {
    LanguageEnum.java: {
      "if",
      "while",
      "else",
      "do",
      "try",
      "finally",
      "return",
      "break",
      "continue",
      "new",
      "void",
      "throw",
      "throws",
      "double",
      "var",
      "const",
      "abstract",
      "float",
      "long",
      "final",
      "exports",
      "public",
      "private",
      "protected",
      "catch",
      "int",
      "goto",
      "for",
      "switch",
      "case",
      "default",
      "package",
      "native",
      "module",
      "interface",
      "transient",
      "instanceof",
      "short",
      "requires",
      "implements",
      "true",
      "false",
      "null",
      "strictfp",
      "synchronized",
      "static",
      "this",
      "class",
      "super",
      "volatile",
      "enum",
      "import",
      "extends",
      "boolean",
      "byte",
      "assert"
    },
    LanguageEnum.python: {
      'False',
      'await',
      'else',
      'import',
      'pass',
      'None',
      'break',
      'except',
      'in',
      'raise',
      'True',
      'class',
      'finally',
      'is',
      'return',
      'and',
      'continue',
      'for',
      'lambda',
      'try',
      'as',
      'def',
      'from',
      'nonlocal',
      'while',
      'assert',
      'del',
      'global',
      'not',
      'with',
      'async',
      'elif',
      'if',
      'or',
      'yield'
    },
    LanguageEnum.c: {
      "if",
      "while",
      "else",
      "do",
      "auto",
      "char",
      "return",
      "break",
      "continue",
      "extern",
      "void",
      "register",
      "short",
      "double",
      "sizeof",
      "const",
      "signed",
      "float",
      "long",
      "struct",
      "typedef",
      "union",
      "catch",
      "int",
      "goto",
      "for",
      "switch",
      "case",
      "default",
      "unsigned",
      "static",
      "volatile",
      "enum"
    },
    LanguageEnum.cpp: {
      'alignas',
      'decltype',
      'namespace',
      'struct',
      'alignof',
      'default',
      'new',
      'switch',
      'and',
      'delete',
      'noexcept',
      'template',
      'and_eq',
      'do',
      'not',
      'this',
      'asm',
      'double',
      'not_eq',
      'thread_local',
      'auto',
      'dynamic_cast',
      'nullptr',
      'throw',
      'bitand',
      'else',
      'operator',
      'true',
      'bitor',
      'enum',
      'or',
      'try',
      'bool',
      'explicit',
      'or_eq',
      'typedef',
      'break',
      'export',
      'private',
      'typeid',
      'case',
      'extern',
      'protected',
      'typename',
      'catch',
      'false',
      'public',
      'union',
      'char',
      'float',
      'register',
      'unsigned',
      'char16t',
      'for',
      'reinterpret_cast',
      'using',
      'char32t',
      'friend',
      'return',
      'virtual',
      'class',
      'goto',
      'short',
      'void',
      'compl',
      'if',
      'signed',
      'volatile',
      'const',
      'inline',
      'sizeof',
      'wchart',
      'constexpr',
      'int',
      'static',
      'while',
      'const_cast',
      'long',
      'static_assert',
      'xor',
      'continue',
      'mutable',
      'static_cast',
      'xor_eq'
    },
    LanguageEnum.csharp: {
      'abstract',
      'as',
      'base',
      'bool',
      'break',
      'byte',
      'case',
      'catch',
      'char',
      'checked',
      'class',
      'const',
      'continue',
      'decimal',
      'default',
      'delegate',
      'do',
      'double',
      'else',
      'enum',
      'event',
      'explicit',
      'extern',
      'false',
      'finally',
      'fixed',
      'float',
      'for',
      'foreach',
      'goto',
      'if',
      'implicit',
      'in',
      'int',
      'interface',
      'internal',
      'is',
      'lock',
      'long',
      'namespace',
      'new',
      'null',
      'object',
      'operator',
      'out',
      'override',
      'params',
      'private',
      'protected',
      'public',
      'readonly',
      'ref',
      'return',
      'sbyte',
      'sealed',
      'short',
      'sizeof',
      'stackalloc',
      'static',
      'string',
      'struct',
      'switch',
      'this',
      'throw',
      'true',
      'try',
      'typeof',
      'uint',
      'ulong',
      'unchecked',
      'unsafe',
      'ushort',
      'using',
      'virtual',
      'void',
      'volatile',
      'while'
    },
    LanguageEnum.dart: {
      'abstract',
      'else',
      'import',
      'super',
      'as',
      'enum',
      'in',
      'switch',
      'assert',
      'export',
      'interface',
      'sync',
      'async',
      'extends',
      'is',
      'this',
      'await',
      'extension',
      'library',
      'throw',
      'break',
      'external',
      'mixin',
      'true',
      'case',
      'factory',
      'new',
      'try',
      'catch',
      'false',
      'null',
      'typedef',
      'class',
      'final',
      'on',
      'var',
      'const',
      'finally',
      'operator',
      'void',
      'continue',
      'for',
      'part',
      'while',
      'covariant',
      'Function',
      'rethrow',
      'with',
      'default',
      'get',
      'return',
      'yield',
      'deferred',
      'hide',
      'set',
      'do',
      'if',
      'show',
      'dynamic',
      'implements',
      'static'
    },
    LanguageEnum.go: {
      'break',
      'default',
      'func',
      'interface',
      'select',
      'case',
      'defer',
      'go',
      'map',
      'struct',
      'chan',
      'else',
      'goto',
      'package',
      'switch',
      'const',
      'fallthrough',
      'if',
      'range',
      'type',
      'continue',
      'for',
      'import',
      'return',
      'var'
    },
    LanguageEnum.javascript: {
      "if",
      "while",
      "else",
      "do",
      "try",
      "finally",
      "return",
      "break",
      "continue",
      "new",
      "void",
      "throw",
      "yield",
      "var",
      "const",
      "export",
      "typeof",
      "public",
      "private",
      "protected",
      "catch",
      "in",
      "of",
      "for",
      "switch",
      "case",
      "default",
      "package",
      "NaN",
      "module",
      "interface",
      "undefined",
      "instanceof",
      "async",
      "await",
      "implements",
      "true",
      "false",
      "null",
      "delete",
      "function",
      "static",
      "this",
      "class",
      "super",
      "enum",
      "import",
      "extends",
      "let",
      "debugger",
      "with"
    },
    LanguageEnum.r: {
      'if',
      'else',
      'repeat',
      'while',
      'function',
      'for',
      'next',
      'break',
      'TRUE',
      'FALSE',
      'NULL',
      'Inf',
      'NaN',
      'NA',
      'NA_integer_',
      'NA_real_',
      'NA_complex_',
      'NA_character_'
    },
    LanguageEnum.swift: {
      'class',
      'deinit',
      'enum',
      'extension',
      'Func',
      'import',
      'init',
      'internal',
      'let',
      'operator',
      'private',
      'protocol',
      'public',
      'static',
      'struct',
      'subscript',
      'typealias',
      'var',
      'break',
      'case',
      'continue',
      'default',
      'do',
      'else',
      'fallthrough',
      'for',
      'if',
      'in',
      'return',
      'switch',
      'where',
      'while',
      'as',
      'dynamicType',
      'false',
      'is',
      'nil',
      'self',
      'Self',
      'super',
      'true',
      '_COLUMN_',
      'fILE_',
      'fUNCTION_',
      '_LINE_',
      'associativity',
      'convenience',
      'dynamic',
      'didSet',
      'final',
      'get',
      'infix',
      'inout',
      'lazy',
      'left',
      'mutating',
      'none',
      'nonmutating',
      'optional',
      'override',
      'postfix',
      'precedence',
      'prefix',
      'Protocol',
      'required',
      'right',
      'set',
      'Type',
      'unowned',
      'weak',
      'willSet'
    },
    LanguageEnum.bash: {
      'unalias',
      'for',
      'umask',
      'shift',
      'function',
      'continue',
      'select',
      'unset',
      'trap',
      'case',
      'until',
      'ulimit',
      'read',
      'if',
      'command',
      'readonly',
      'eval',
      'kill',
      'bg',
      'pwd',
      'jobs',
      'exec',
      'typeset',
      'disown',
      'test',
      'while',
      'cd',
      'builtin',
      'getopts',
      'export',
      'alias',
      'exit',
      'return',
      'break',
      'let',
      'fg',
      'echo',
      'set',
      'wait',
      'printf'
    },
    LanguageEnum.ruby: {
      'and',
      'end',
      'begin',
      'module',
      'true',
      'else',
      'when',
      '__FILE__',
      'defined',
      'next',
      'not',
      'then',
      'class',
      'undef',
      'elsif',
      'redo',
      'ensure',
      'self',
      ' ',
      'false',
      'in',
      'or',
      'def',
      'rescue',
      'yield',
      '__LINE__',
      'return',
      'unlessuntil',
      'alias',
      'BEGIN',
      'retry',
      'nil',
      'END',
      'if',
      'while',
      '__ENCODING__',
      'do',
      'super',
      'case',
      'for',
      'break'
    },
  };
}
